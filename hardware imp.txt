#include <stdio.h>
#include "xparameters.h"
#include "platform.h"
#include "xil_printf.h"
#include "xgcdfunction.h"
#include "xaxidma.h"
#include "xtime_l.h"

#define TIMEDIFF(t1,t2) (t2 - t1)
#define MILLISECONDS(t) (1000.0 * t / COUNTS_PER_SECOND)

XTime start, end;

// Start a test
void startTest() {
	XTime_GetTime(&start);
}
// End a test
void endTest() {
	XTime_GetTime(&end);
	double time_curr = TIMEDIFF(start, end);
	double msec = MILLISECONDS(time_curr);
	printf("\nRun-time cycles = %d cycles...",(int)time_curr);

}

#define MEM_BASE_ADDRESS 0x0A000000
#define TX_BUFFER_BASE (MEM_BASE_ADDRESS + 0X00100000)
#define RX_BUFFER_BASE (MEM_BASE_ADDRESS + 0X00300000)

XGcdfunction gcdfunction;
XGcdfunction_Config *gcd_function_config;

XAxiDma axidma;
XAxiDma_Config *axi_dma_config;

void init_peripherals()
{
	printf("Initializing Gcd function... \n");
	gcd_function_config= XGcdfunction_LookupConfig(XPAR_GCDFUNCTION_0_DEVICE_ID);
	if (gcd_function_config)
	{
		int status= XGcdfunction_CfgInitialize(&gcdfunction, gcd_function_config);

		if(status!= XST_SUCCESS)
		{
			printf("ERROR IN MATRIX MUL CORE \n");
		}
	}

	printf("Initializing AXI DMA core\n");
	axi_dma_config=XAxiDma_LookupConfig(XPAR_AXIDMA_0_DEVICE_ID);
	if (axi_dma_config)
	{
		int status= XAxiDma_CfgInitialize(&axidma, axi_dma_config);

		if (status!= XST_SUCCESS)
		{
			printf("AXI DMA error \n");
		}
	}

	//XAxiDma_IntrDisable(&axidma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
	//XAxiDma_IntrDisable(&axidma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);
	//XAxiDma_IntrEnable(&axidma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
	//XAxiDma_IntrEnable(&axidma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);
}


int main()
{
    init_platform();
    int inputdata[8]={106,0,68,119,7854,4746,36,60};
    int instreamdata[2];
    int *m_dma_buffer_Rx= (int*) RX_BUFFER_BASE;
    print("\nHello World\n");

    init_peripherals();
    for(int i=0;i<8;i+=2)
    {
   instreamdata[0]= inputdata[i];
    instreamdata[1]= inputdata[i+1];
    printf("\nNumber1 : %d",instreamdata[0]);
    printf("\nNumber2 : %d",instreamdata[1]);


   	Xil_DCacheFlushRange((u32)instreamdata, 2*sizeof(int));
   	Xil_DCacheFlushRange((u32)m_dma_buffer_Rx, sizeof(int));

   	//printf("Send input data... \n");
   	XAxiDma_SimpleTransfer(&axidma, (u32)instreamdata, 2*sizeof(int), XAXIDMA_DMA_TO_DEVICE);
   	//printf("Wait for Data Transfer to Matrix Mul IP.\n");
   	while(XAxiDma_Busy(&axidma, XAXIDMA_DMA_TO_DEVICE));

	XGcdfunction_Set_gain(&gcdfunction, 3);
	    XGcdfunction_Start(&gcdfunction);
	    startTest();
	   while(!XGcdfunction_IsDone(&gcdfunction));
	   endTest();
   	//printf("Read output data .... \n");
   	XAxiDma_SimpleTransfer(&axidma, (u32)m_dma_buffer_Rx, sizeof(int), XAXIDMA_DEVICE_TO_DMA);

    //printf("Wait for Data Transfer to DMA.\n");
    while(XAxiDma_Busy(&axidma, XAXIDMA_DEVICE_TO_DMA) || XAxiDma_Busy(&axidma, XAXIDMA_DMA_TO_DEVICE));

    Xil_DCacheInvalidateRange((u32)m_dma_buffer_Rx, sizeof(int));



    printf("\nGCD: %d\n", m_dma_buffer_Rx[0]);

    }
    cleanup_platform();
    return 0;
}
